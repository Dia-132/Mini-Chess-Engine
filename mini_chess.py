# -*- coding: utf-8 -*-
"""mini_chess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/130B5AYR61-RWClcLVXyaou7EgG33dGeP
"""

pip install python-chess

import chess

def evaluate_board(board):
    piece_values = {'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1}
    white_score = sum(piece_values.get(piece.symbol(), 0) for _, piece in board.piece_map().items() if piece.color == chess.WHITE)
    black_score = sum(piece_values.get(piece.symbol(), 0) for _, piece in board.piece_map().items() if piece.color == chess.BLACK)
    return white_score - black_score

def minimax(board, depth, maximizing_player):
    if depth == 0 or board.is_game_over():
        return evaluate_board(board)

    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            eval = minimax(board, depth - 1, False)
            board.pop()
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            eval = minimax(board, depth - 1, True)
            board.pop()
            min_eval = min(min_eval, eval)
        return min_eval

def get_best_move(board, depth):
    best_move = None
    best_eval = float('-inf')
    for move in board.legal_moves:
        board.push(move)
        eval = minimax(board, depth - 1, False)
        board.pop()
        if eval > best_eval:
            best_eval = eval
            best_move = move
    return best_move

def suggest_player_moves(board, depth, top_k=3):
    move_scores = []
    for move in board.legal_moves:
        board.push(move)
        eval = minimax(board, depth - 1, False)
        board.pop()
        move_scores.append((move, eval))

    # Sort moves by score descending and return top K
    move_scores.sort(key=lambda x: x[1], reverse=True)
    return move_scores[:top_k]

def play_vs_ai():
    board = chess.Board()
    depth = 2
    print("\n‚ôüÔ∏è Welcome to Beginner Chess Engine!")
    print("You are WHITE. Enter moves like 'e2e4' or 'g1f3'")
    print(board)

    while not board.is_game_over():
        # --- User move ---
        user_move = input("\nYour move: ").strip()
        try:
            move = chess.Move.from_uci(user_move)
            if move in board.legal_moves:
                board.push(move)
                print("\n Your move applied.")
                print(board)
            else:
                print("\ Illegal move. Try again.")
                continue
        except:
            print(" Invalid format. Use format like e2e4 (start to end square)")
            continue

        if board.is_game_over():
            break

        # --- AI move ---
        print("\n AI is thinking...")
        ai_move = get_best_move(board, depth)
        if ai_move:
            print(f"AI plays: {board.san(ai_move)} ({ai_move.uci()})")
            board.push(ai_move)
            print(board)
        else:
            print("AI has no legal moves.")

        if board.is_game_over():
            break

        # --- Suggest Moves for Player ---
        print("\n Suggested moves for you:")
        suggestions = suggest_player_moves(board, depth=1, top_k=3)
        for i, (move, score) in enumerate(suggestions, start=1):
            san_move = board.san(move)
            print(f"  {i}. {san_move} ({move.uci()}) ‚Üí eval: {score}")

    print("\nüèÅ Game Over!")
    print("Result:", board.result())

if __name__ == "__main__":
    play_vs_ai()